<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	<context:property-placeholder location="classpath:config.properties" />
   <!-- datasource -->
    <bean id="localDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${mysql.url}" />
        <property name="username" value="${mysql.username}" />
        <property name="password" value="${mysql.password}" />
        <property name="testOnBorrow" value="true" />
        <property name="validationQuery" value="select 1" />
    </bean>

    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="localDataSource" />
    </bean>

    <!-- enable component scanning (beware that this does not enable mapper scanning!) -->    
    <context:component-scan base-package="com.zhanghui.rommer.service" />

    <!-- enable autowire -->
    <context:annotation-config />

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven />

    <!-- define the SqlSessionFactory -->
    <bean id="localSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="localDataSource" />
        <property name="typeAliasesPackage" value="com.zhanghui.rommer.domain" />
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zhanghui.rommer.persistence" />
        <property name="sqlSessionFactoryBeanName" value="localSqlSessionFactory"/>
    </bean>

	<!-- Redis -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0">
			<bean class="redis.clients.jedis.JedisPoolConfig">
				<property name="maxActive" value="${redis.pool.maxActive}" />
				<property name="maxIdle" value="${redis.pool.maxIdle}" />
				<property name="minIdle" value="${redis.pool.minIdle}" />
                <property name="maxWait" value="${redis.pool.maxWait}" />
			</bean>
		</constructor-arg>
		<constructor-arg index="1" value="${redis.ip}"/>
		<constructor-arg index="2" value="${redis.port}"/>
		<constructor-arg index="3" value="${redis.timeout}"/>
	</bean>
		<bean id="timerTest" class="com.zhanghui.rommer.statistics.TimerSchedule">
	</bean>

	<bean id="timerTestDetail"    
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
        <property name="targetObject">  
            <ref bean="timerTest"/>  
        </property>  
        <property name="targetMethod">  
            <value>excute</value>  
        </property>  
        <property name="concurrent">  
            <value>false</value>  
        </property>  
    </bean> 
	
	<bean id="timerTestTrigger"    
          class="org.springframework.scheduling.quartz.CronTriggerBean">  
        <property name="jobDetail">  
            <ref bean="timerTestDetail"/>  
        </property>  
        <property name="cronExpression">  
            <value>0 0 2 * * ?</value>  
        </property>  
     </bean> 
    
	<bean id="taskSchedulerFactory"  
	        class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
	       	<property name="autoStartup" value="true"/>  
	        <property name="startupDelay" value="1"/>  
	        <property name="triggers">  
	            <list>  
	                <ref local="timerTestTrigger"/> 
	            </list>  
	        </property>  
     </bean>
</beans>
